# Libraries

```{r}

library(shiny)
library(shinyjs)
library(DT)
library(readxl)
library(dplyr)
library(haven)

```


# Data storage

```{r}

# relative data storage
projectData <- reactiveVal(list())

```

# UI

```{r}

ui <- fluidPage(
  
# CUSTOM STYLES
    tags$head(
        tags$style(HTML("
        
      /*  GENERAL LAYOUT */ 
            body, html {
                height: 100%;
                margin: 0;
            }
            
      /* CENTERING BUTTONS */ 
            .center-buttons {
                display: flex;
                justify-content: center;
                align-items: center;
                gap: 40px;
                height: 100vh;
            }
            
      /* ROUND BUTTONS + LABEL */
            .round-button-container {
                display: flex;
                flex-direction: column;
                align-items: center;
            }
            .round-button {
                width: 100px;
                height: 100px;
                border-radius: 50%;
                padding: 20px;
                font-size: 14px;
                background-color:#d5d5d5;
                color: white;
                border: none;
                display: flex;
                justify-content: center;
                align-items: center;
                cursor: pointer;
            }
            .round-button:hover {
                background-color:#4682B4;
            }
            .button-text {
                margin-top: 10px;
                font-size: 16px;
            }
            
      /* NEW PROJECT FORM STYLING */
            .form-container {
                display: flex;
                flex-direction: column;
                gap: 15px;
                padding: 20px;
                width: 300px;
                margin: 0 auto;
            }
            
      /* DATA CLEAING & TABLE PREVIEW */ 
            .data-cleaning-container {
                display: flex;
                flex-direction: column;
                padding: 20px;
            }
            .table-preview {
                width: 100%;
            }
            
      /* NAVIGATION BUTTONS */
            .next-button-container {
                margin-top: 20px;
                display: flex;
                justify-content: center;
            }
            .next-button {
                background-color: #d5d5d5;
                color: black;
                border: none;
                padding: 10px 20px;
                cursor: pointer;
                font-size: 16px;
                border-radius: 5px;
            }
            .next-button:hover {
                background-color: #B0C4DE;
            }
            .deselect-button-container {
                font-size: 12px;
                padding: 4px 8px;
                background-color: #e0e0e0;
                color: #333;
                border: 1px solid #ccc;
                border-radius: 4px;
                height: auto;
            }
            .deselect-button-container:hover {
                background-color: #B0C4DE;
            }
            .save-button-container {
                margin-top: 10px;
                display: flex;
                justify-content: center;
                gap: 10px;
            }
            
      /* TWO-COLUMN LAYOUT */
            .left-column {
                width: 20%;
                padding: 20px;
                border-right: 2px solid #ccc;
            }
            .right-column {
                width: 80%;
                padding: 20px;
                .right-column .dataTable {
                  font-size: 12px;
                  max-height: 400px;
                  overflow-y: auto;
              }
            }
            .column-container {
                display: flex;
                justify-content: space-between;
                margin-bottom: 20px;
            }
            
      /* BUTTON GROUP */
            .button-group {
                display: flex;
                justify-content: space-between;
                width: 100%;
            } 
            
      /* JAVA: EXIT WARNING */
        /* BEFORE SAVING */
            let confirmClose = true;

            window.addEventListener('beforeunload', function (e) {
                if (confirmClose) {
                    e.preventDefault();
                    Shiny.setInputValue('show_exit_modal', Math.random());
                    e.returnValue = '';
                    return '';
                }
            });
          
        /* DISABLE EXIT WARNING AFTER CONFIRMATION */
            Shiny.addCustomMessageHandler('disableConfirmClose', function(message) {
                confirmClose = false;
                window.location.reload();
            })
        "))
    ),

    
# FOR RUNNING JAVA
    useShinyjs(),

    
# SAVE FULL PROGRESS BUTTON    
    div(
      style = "display: flex; justify-content: space-between; align-items: center; padding-right: 20px;",
      titlePanel("Report generator"),
      actionButton("save_full_progress", "Save Progress", class = "next-button")
    ),


    
# INITIAL BUTTONS (new/previous project)
    div(
        id = "main_buttons",
        class = "center-buttons",
        div(
            class = "round-button-container",
            actionButton("button1", "", class = "round-button"),
            div(class = "button-text", "New project")
            ),
        div(
            class = "round-button-container",
            actionButton("button2", "", class = "round-button"),
            div(class = "button-text", "Previous projects")
            )
    ),

    
#NEW PROJECT FORM
    div(id = "formContainer", class = "form-container", style = "display:none;",
        textInput("project_name", "Project Name:"),
        textInput("client_name", "Client Name:"),
        fileInput("datafile", "Upload Data File:", accept = c(".csv", ".xlsx", ".xls")),
        actionButton("save_button", "Save Project")
    ),

    
    
    
# TABS
    div(id = "tabsContainer", style = "display:none;",
        tabsetPanel(
            id = "tabs",
            
## TAB DATA CLEANING            
            tabPanel("Data Cleaning", value = "data_cleaning",
                div(id = "dataCleaningTab", class = "data-cleaning-container",
                    div(class = "column-container",
                        div(class = "left-column",
                            div(style = "display: flex; 
                                align-items: center; justify-content: space-between;", 
                                h4("Select Variables:"), 
                                actionButton("deselect_all", 
                                             "Deselect All", class = "deselect-button-container")
                                ),
                            checkboxGroupInput("variables", NULL, choices = NULL, selected = NULL)
                        ),
                        
                        div(class = "right-column",
                            DTOutput("tablePreview")
                        )
                    ),
                    
                    div(class = "save-button-container",
                        actionButton("next_button", "Next", class = "next-button")
                    )
                )
            ),
            
            
## TAB DATA ANALYSIS
            tabPanel("Data Analysis", value = "data_analysis",
               div(style = "display: flex; gap: 40px; align-items: flex-start; padding: 20px;",
                   
                  # left column
                  div(style = "flex: 1;",
                      h4("Analysis type"),
                      selectInput("analysis_method", NULL,
                                  choices = c("Frequency", "Mean", "Median", "Standard Deviation")),
                  ),

                  # center column
                  div(style = "flex: 3;",
                      uiOutput("analysis_method_title"),
                      selectInput("analysis_variable", NULL, choices = NULL),
                      br(),
                  ),

                  # right column
                  div(style = "flex: 1; min-width: 300px;",
                      DTOutput("analysis_result")
                  )
               )
            ),
            
## TAB REPORT GENERATOR            
            tabPanel("Report Generator", value = "report_generator"),

## TAB PREVIEW
            tabPanel("Preview", value = "preview")
        )
    )
)


```

# Server

```{r}

server <- function(input, output, session) {

# SET UP  
    dataset <- reactiveVal(NULL) # stores the uploaded dataset
    selectedVariables <- reactiveVal(NULL) # stores the selected variables for analysis
     values <- reactiveValues() # stores new project form information

# NEW PROJECT BUTTON 
    observeEvent(input$button1, {
        hide("main_buttons")
        show("formContainer")
    })

# NEW PROJECT BUTTON: SAVE    
    observeEvent(input$save_button, {
    project_name <- input$project_name
    client_name <- input$client_name
    datafile <- input$datafile
    project_file_name <- datafile$name
    values$project_file_name <- project_file_name

  ## CHECK IF FILE UPLOAD
    if (is.null(datafile)) {
        showModal(modalDialog(
            title = "Error",
            "Please upload a data file.",
            easyClose = TRUE,
            footer = NULL
        ))
        return()
    }

  ## READ DATA
    if (grepl(".csv$", datafile$name)) {
        data <- tryCatch({
            read.csv(datafile$datapath, fill = TRUE)
        }, error = function(e) return(NULL))
    } else if (grepl(".xlsx$", datafile$name)) {
        data <- tryCatch({
            read_excel(datafile$datapath)
        }, error = function(e) return(NULL))
    } else if (grepl(".xls$", datafile$name)) {
        data <- tryCatch({
            read_excel(datafile$datapath)
        }, error = function(e) return(NULL))
    } else if (grepl(".dta$", datafile$name)) {
        data <- tryCatch({
            read_dta(datafile$datapath)
        }, error = function(e) return(NULL))
    } else {
        showModal(modalDialog(
            title = "Error",
            "Unsupported file format. Please upload a csv, xls, xlsx, dta.",
            easyClose = TRUE,
            footer = NULL
        ))
        return()
    }

    if (is.null(data)) return()

  ## DATA CLEANING
    data <- data %>% select(where(~ is.numeric(.) || is.character(.) || is.factor(.)))
    data <- data %>% mutate(across(where(is.character), as.factor))

    
  ## SAVE DATASET AND VARIABLES
    dataset(data) # clean data
    selectedVariables(names(data)) # name of the columns

    
  ## STORE THE PROJECT
    dir.create("saved_projects", showWarnings = FALSE) # create a directory
    saveRDS( # safe project with R Data Serialization extension (store R objects in a binary format)
      list(
        name = project_name,
        client = input$client_name,
        data = dataset(),
        variables = selectedVariables(),
        analysis_method = input$analysis_method,
        analysis_variable = input$analysis_variable,
        date = Sys.Date(),
        file = project_file_name
      ),
      file = file.path("saved_projects", paste0(project_name, ".rds"))
    )

  ## UI UPDATE
    hide("formContainer") # hide new project form
    show("tabsContainer") # show tabs
    
    })
    
    
# PREVIOUS PROJECTS BUTTON     
    observeEvent(input$button2, {
    hide("main_buttons")

  ## CHECK FOR SAVE PROJECTS 
    files <- list.files("saved_projects", pattern = "\\.rds$", full.names = TRUE) 
    if (length(files) == 0) {
        showModal(modalDialog(
            title = "No projects found",
            "There are no saved projects to load.",
            easyClose = TRUE
        ))
        return()
    }

  ## CREATE PROJECT LIST TABLE (for each .rds)
    project_list <- lapply(files, function(path) {
        info <- file.info(path) # file metadata
        project <- readRDS(path)

        data.frame(
            Name = project$name,
            Client = project$client,
            DateModified = as.character(info$mtime),
            DatabaseFile = ifelse(is.null(project$file), "unknown", project$file),
            stringsAsFactors = FALSE
        )
    })

    values$projects_df <- do.call(rbind, project_list) #combines all indiv. dataframes into one
 
   ## DISPLAY PROJECT LIST
    showModal(modalDialog(
        title = "Select a previous project",
        textInput("search_project", "Search by Name or Client:"),
        DTOutput("projects_table"),
        footer = tagList(
            modalButton("Cancel"),
            actionButton("load_selected_project", "Load Selected Project")
        ),
        size = "l",
        easyClose = TRUE
    ))
})

# RENDER THE PROJECT TABLE    
    output$projects_table <- renderDT({
    req(values$projects_df)

    df <- values$projects_df
    search_term <- input$search_project
    
  ## FILTERING DATA
    if (!is.null(search_term) && search_term != "") {
        df <- df[grepl(search_term, df$Name, ignore.case = TRUE) |
                 grepl(search_term, df$Client, ignore.case = TRUE), ]
    }
  
  ## RENDERING DataTable
    datatable(df, selection = "single", options = list(pageLength = 5)) # interactive by row
})

    
# LOAD PROJECT FROM SELECTION    
    observeEvent(input$load_selected_project_from_table, {
      
    ## CHECK IF PROJECT SELECTED
      selected <- input$project_table_rows_selected
      if (length(selected) == 0) {
        showModal(modalDialog("Please select a project to load.", easyClose = TRUE))
        return()
      }
    
    ## LOAD SELECTED PROJECT
      filepath <- values$project_table$Path[selected]
      project <- readRDS(filepath)
    
    ## LOAD PROJECT DATA INTO APP 
      dataset(project$data)
      selectedVariables(project$variables)
    
      updateSelectInput(session, "analysis_method", selected = project$analysis_method)
      updateSelectInput(session, "analysis_variable", choices = project$variables, 
                        selected = project$analysis_variable)
      updateTextInput(session, "project_name", value = project$name)
      updateTextInput(session, "client_name", value = project$client)

# CLOSE MODAL + NEXT UI   
      removeModal() # modal dialog remove
      show("tabsContainer")
  })

# EXIT WARNING
    observeEvent(input$show_exit_modal, {
    showModal(modalDialog(
        title = "Do you want to save before exiting?",
        "You are about to exit the application. You can save your progress to resume later.",
        footer = tagList(
            actionButton("confirm_save_before_exit", "Save and Exit", class = "next-button"),
            modalButton("Exit without saving")
        ),
        easyClose = TRUE
    ))
  })

  ## SAVE BEFORE EXIT
    observeEvent(input$confirm_save_before_exit, {
    req(dataset(), selectedVariables())

    project_name <- input$project_name
    if (is.null(project_name) || project_name == "") {
        showModal(modalDialog(
            title = "Name Required",
            "Please enter a project name in order to save it.",
            easyClose = TRUE
        ))
        return()
    }

    saveRDS(
      list(
        name = project_name,
        client = input$client_name,
        data = dataset(),
        variables = selectedVariables(),
        analysis_method = input$analysis_method,
        analysis_variable = input$analysis_variable,
        date = Sys.Date(),
        file = project_file_name
      ),
      file = file.path("saved_projects", paste0(project_name, ".rds"))
    )


    removeModal()
    session$sendCustomMessage("disableConfirmClose", list())
})


# SAVE FULL PROGRESS
    observeEvent(input$save_full_progress, {
    req(dataset(), selectedVariables())

    project_name <- input$project_name
    if (is.null(project_name) || project_name == "") {
        showModal(modalDialog(
            title = "Missing Project Name",
            "Please enter a project name before saving progress.",
            easyClose = TRUE
        ))
        return()
    }

    saveRDS(
      list(
        name = project_name,
        client = input$client_name,
        data = dataset(),
        variables = selectedVariables(),
        analysis_method = input$analysis_method,
        analysis_variable = input$analysis_variable,
        date = Sys.Date(),
        file = project_file_name
      ),
      file = file.path("saved_projects", paste0(project_name, ".rds"))
    )

    showModal(modalDialog(
        title = "Saved!",
        "Your progress has been saved.",
        easyClose = TRUE
    ))
})

# UPDATE SELECTED VARIABLES LIST
    observeEvent(input$variables, {
        selectedVariables(input$variables)
    })

# DESELECT ALL VARIABLES
    observeEvent(input$deselect_all, {
        updateCheckboxGroupInput(session, "variables", selected = character(0))
    })

# DATA CLEANING TAB: first 
    observeEvent(dataset(), {
        data <- dataset() # update
        if (!is.null(data)) { 
            updateCheckboxGroupInput(session, "variables", 
                                     choices = names(data), 
                                     selected = selectedVariables())

            output$tablePreview <- renderDT({ # preview of selected variables
                selected_data <- data[, selectedVariables(), drop = FALSE]
                datatable(selected_data)
            })
        }
    })

# RUN SIMPLE ANALYSIS
    observeEvent(c(input$analysis_method, input$analysis_variable), {
        req(input$analysis_variable)
        data <- dataset()
        if (!is.null(data)) {
            selected_var <- input$analysis_variable
            method <- input$analysis_method

            result <- NULL

            if (method == "Mean") {
                result <- round(mean(data[[selected_var]], na.rm = TRUE), 2)
            } else if (method == "Median") {
                result <- round(median(data[[selected_var]], na.rm = TRUE), 2)
            } else if (method == "Standard Deviation") {
                result <- round(sd(data[[selected_var]], na.rm = TRUE), 2)
            } else if (method == "Frequency") {
                freq_table <- table(data[[selected_var]])
                result <- as.data.frame(freq_table)
                colnames(result) <- c("Value", "Frequency") 
            }

            output$analysis_result <- renderDT({
                if (method == "Frequency") {
                    datatable(result)
                } else {
                    datatable(data.frame(Method = method, Result = result))
                }
            })
        }
    })

# NEXT BUTTON  
    observeEvent(input$next_button, {
    selectedVariables(input$variables)  # save selected variables
    updateTabsetPanel(session, "tabs", selected = "data_analysis")
    })

# UPDATE ANALYSIS VARIABLE DROPDOWN
    observeEvent(selectedVariables(), {
        updateSelectInput(session, "analysis_variable", 
                          choices = selectedVariables(), 
                          selected = selectedVariables()[1])
    })

}
```

# Run App

```{r}

shinyApp(ui, server)

```


